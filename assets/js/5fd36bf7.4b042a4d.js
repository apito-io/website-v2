"use strict";(self.webpackChunkapito_website_v_2=self.webpackChunkapito_website_v_2||[]).push([[4255,1423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,ah:()=>s,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=s(n),d=a,h=g["".concat(p,".").concat(d)]||g[d]||u[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},18563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=n(87462),a=(n(67294),n(3905)),o=n(67714);const i={sidebar_label:"Golang",title:"GraphQL API Integration on a Golang Project"},l=void 0,p={unversionedId:"api-integration/graphql/integration-with-golang",id:"api-integration/graphql/integration-with-golang",title:"GraphQL API Integration on a Golang Project",description:"There are many GraphQL client written in golang. machinebox/graphql is a Low-level GraphQL client for Go.",source:"@site/docs/api-integration/graphql/integration-with-golang.mdx",sourceDirName:"api-integration/graphql",slug:"/api-integration/graphql/integration-with-golang",permalink:"/docs/api-integration/graphql/integration-with-golang",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/integration-with-golang.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Golang",title:"GraphQL API Integration on a Golang Project"},sidebar:"docs",previous:{title:"Flutter",permalink:"/docs/api-integration/graphql/integration-with-flutter"},next:{title:"React",permalink:"/docs/api-integration/graphql/integration-with-react"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],u={toc:c};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("head",null,(0,a.kt)("meta",{property:"og:type",content:"article"})),(0,a.kt)("p",null,"There are many GraphQL client written in golang. ",(0,a.kt)("inlineCode",{parentName:"p"},"machinebox/graphql")," is a Low-level GraphQL client for Go."),(0,a.kt)("p",null,"This client is,"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Simple, familiar API"),(0,a.kt)("li",{parentName:"ol"},"Respects context.Context timeouts and cancellation"),(0,a.kt)("li",{parentName:"ol"},"Build and execute any kind of GraphQL request"),(0,a.kt)("li",{parentName:"ol"},"Use strong Go types for response data"),(0,a.kt)("li",{parentName:"ol"},"Use variables and upload files"),(0,a.kt)("li",{parentName:"ol"},"Simple error handling")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Make sure you have a working Go environment. To install graphql, simply run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ go get github.com/machinebox/graphql\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)(o.default,{mdxType:"ApiSecretNote"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import "context"\n\n// create a client (safe to share across requests)\nclient := graphql.NewClient("https://api.apito.io/secured/graphql")\n\n// make a request\nreq := graphql.NewRequest(`\n    query ($key: String!) {\n        items (id:$key) {\n            field1\n            field2\n            field3\n        }\n    }\n`)\n\n// set any variables\nreq.Var("key", "value")\n\n// set header fields\nreq.Header.Set("Authorization", "Bearer API_SECRET")\n\n// define a Context for the request\nctx := context.Background()\n\n// run it and capture the response\nvar respData ResponseStruct\nif err := client.Run(ctx, req, &respData); err != nil {\n    log.Fatal(err)\n}\n')))}g.isMDXComponent=!0},67714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={},i=void 0,l={unversionedId:"api-integration/graphql/shared/api-secret-note",id:"api-integration/graphql/shared/api-secret-note",title:"api-secret-note",description:"Always remember to replace API_SECRET with the correct value that you copied from apito console.",source:"@site/docs/api-integration/graphql/shared/api-secret-note.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/api-secret-note",permalink:"/docs/api-integration/graphql/shared/api-secret-note",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/api-secret-note.mdx",tags:[],version:"current",frontMatter:{}},p={},s=[],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Always remember to replace ",(0,a.kt)("inlineCode",{parentName:"p"},"API_SECRET")," with the correct value that you copied from apito console.\nGo to ",(0,a.kt)("a",{parentName:"p",href:"/docs/console/api-integration-with-your-application"},"this page")," if you do not know where to find your api secrets for your project")))}u.isMDXComponent=!0}}]);