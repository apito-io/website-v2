"use strict";(self.webpackChunkapito_website_v_2=self.webpackChunkapito_website_v_2||[]).push([[2317,2975,7057,1423],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,ah:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(a),h=r,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||o;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},18679:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),r=a(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:a},t)}},34259:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(87462),r=a(67294),o=a(86010),l=a(51048),i=a(33609),s=a(1943),p=a(72957);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){var t,a;const{lazy:l,block:c,defaultValue:h,values:m,groupId:g,className:y}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),k=(0,i.l)(v,((e,t)=>e.value===t.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===h?h:null!=(t=null!=h?h:null==(a=f.find((e=>e.props.default)))?void 0:a.props.value)?t:f[0].props.value;if(null!==b&&!v.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:q,setTabGroupChoices:w}=(0,s.U)(),[x,N]=(0,r.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:A}=(0,p.o5)();if(null!=g){const e=q[g];null!=e&&e!==x&&v.some((t=>t.value===e))&&N(e)}const C=e=>{const t=e.currentTarget,a=T.indexOf(t),n=v[a].value;n!==x&&(A(t),N(n),null!=g&&w(g,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=T.indexOf(e.currentTarget)+1;a=null!=(n=T[t])?n:T[0];break}case"ArrowLeft":{var r;const t=T.indexOf(e.currentTarget)-1;a=null!=(r=T[t])?r:T[T.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},y)},v.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>T.push(e),onKeyDown:E,onFocus:C,onClick:C},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":x===t})}),null!=a?a:t)}))),l?(0,r.cloneElement)(f.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function h(e){const t=(0,l.Z)();return r.createElement(c,(0,n.Z)({key:String(t)},e))}},24076:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>p,metadata:()=>d,toc:()=>h});var n=a(87462),r=(a(67294),a(3905)),o=a(34259),l=a(18679),i=a(9833),s=a(25917);const p={sidebar_label:"Android (Kotlin)",title:"GraphQL API Integration with Android Project"},u=void 0,d={unversionedId:"api-integration/graphql/integration-with-android",id:"api-integration/graphql/integration-with-android",title:"GraphQL API Integration with Android Project",description:"Apollo Android is a GraphQL client that generates Java and Kotlin models from GraphQL queries. These models give you a type-safe API to work with GraphQL servers.",source:"@site/docs/api-integration/graphql/integration-with-android.mdx",sourceDirName:"api-integration/graphql",slug:"/api-integration/graphql/integration-with-android",permalink:"/docs/api-integration/graphql/integration-with-android",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/integration-with-android.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Android (Kotlin)",title:"GraphQL API Integration with Android Project"},sidebar:"docs",previous:{title:"Java",permalink:"/docs/api-integration/graphql/integration-with-java"},next:{title:"iOS",permalink:"/docs/api-integration/graphql/integration-with-ios"}},c={},h=[{value:"Add the Gradle plugin",id:"add-the-gradle-plugin",level:2},{value:"Configure the plugin",id:"configure-the-plugin",level:2},{value:"Add the runtime dependencies",id:"add-the-runtime-dependencies",level:2},{value:"Download your <code>schema.json</code> file",id:"download-your-schemajson-file",level:2},{value:"Add your query",id:"add-your-query",level:2},{value:"Executing your query",id:"executing-your-query",level:2}],m={toc:h};function g(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("meta",{property:"og:type",content:"article"})),(0,r.kt)("p",null,"Apollo Android is a GraphQL client that generates Java and Kotlin models from GraphQL queries. These models give you a type-safe API to work with GraphQL servers."),(0,r.kt)("h2",{id:"add-the-gradle-plugin"},"Add the Gradle plugin"),(0,r.kt)("p",null,"In your app Gradle file, apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"com.apollographql.apollo")," plugin:"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block"},"plugins DSL"),":"),(0,r.kt)(o.Z,{defaultValue:"groovy",values:[{label:"groovy",value:"groovy"},{label:"kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"groovy",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'plugins {\n    // ...\n    id("com.apollographql.apollo").version("x.y.z")\n}\n'))),(0,r.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    // ...\n    id("com.apollographql.apollo").version("x.y.z")\n}\n')))),(0,r.kt)("p",null,"Or using the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/plugins.html#sec:old_plugin_application"},"legacy syntax"),":"),(0,r.kt)(o.Z,{defaultValue:"groovy",values:[{label:"groovy",value:"groovy"},{label:"kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"groovy",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'buildscript {\n  // ...\n  classpath("com.apollographql.apollo:apollo-gradle-plugin:x.y.z")\n}\n\napply plugin: "com.apollographql.apollo"\n'))),(0,r.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'buildscript {\n  // ...\n  classpath("com.apollographql.apollo:apollo-gradle-plugin:x.y.z")\n}\n\napply(plugin = "com.apollographql.apollo")\n')))),(0,r.kt)("p",null,"The plugin is hosted on the Gradle plugin portal, Jcenter and Maven Central."),(0,r.kt)("h2",{id:"configure-the-plugin"},"Configure the plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"apollo {\n  // instruct the compiler to generate Kotlin models\n  generateKotlinModels.set(true)\n}\n")),(0,r.kt)("h2",{id:"add-the-runtime-dependencies"},"Add the runtime dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n  // The core runtime dependencies\n  implementation("com.apollographql.apollo:apollo-runtime:x.y.z")\n  // Coroutines extensions for easier asynchronicity handling\n  implementation("com.apollographql.apollo:apollo-coroutines-support:x.y.z")\n}\n')),(0,r.kt)("h2",{id:"download-your-schemajson-file"},"Download your ",(0,r.kt)("inlineCode",{parentName:"h2"},"schema.json")," file"),(0,r.kt)(i.default,{mdxType:"DownloadSchema"}),(0,r.kt)("h2",{id:"add-your-query"},"Add your query"),(0,r.kt)(s.default,{mdxType:"AddQuery"}),(0,r.kt)("h2",{id:"executing-your-query"},"Executing your query"),(0,r.kt)("p",null,"You use an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApolloClient")," class to interact with your server and cache."),(0,r.kt)("p",null,"To make a query using your generated models:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// First, create an `ApolloClient`\n// Replace the serverUrl with your GraphQL endpoint\nval apolloClient = ApolloClient.builder()\n  .serverUrl("https://api.apito.io/secured/graphql")\n  .build()\n\n// in your coroutine scope, call `ApolloClient.query(...).toDeferred().await()`\nscope.launch {\n  val response = try {\n    apolloClient.query(LaunchDetailsQuery(id = "83")).toDeferred().await()\n  } catch (e: ApolloException) {\n    // handle protocol errors\n    return@launch\n  }\n\n  val launch = response.data?.launch\n  if (launch == null || response.hasErrors()) {\n    // handle application errors\n    return@launch\n  }\n\n  // launch now contains a typesafe model of your data\n  println("Launch site: ${launch.site}")\n}\n')))}g.isMDXComponent=!0},25917:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={},l=void 0,i={unversionedId:"api-integration/graphql/shared/add-query",id:"api-integration/graphql/shared/add-query",title:"add-query",description:"1. Create a directory for your GraphQL files: src/main/graphql/com/example/",source:"@site/docs/api-integration/graphql/shared/add-query.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/add-query",permalink:"/docs/api-integration/graphql/shared/add-query",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/add-query.mdx",tags:[],version:"current",frontMatter:{}},s={},p=[],u={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a directory for your GraphQL files: ",(0,r.kt)("inlineCode",{parentName:"li"},"src/main/graphql/com/example/")),(0,r.kt)("li",{parentName:"ol"},"Add your ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.json")," to the directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"src/main/graphql/com/example/schema.json")),(0,r.kt)("li",{parentName:"ol"},"Put your query in a ",(0,r.kt)("inlineCode",{parentName:"li"},".graphql")," file, next to the schema: ",(0,r.kt)("inlineCode",{parentName:"li"},"src/main/graphql/com/example/LaunchDetails.graphql"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="src/main/graphql/com/example/LaunchDetails.graphql"',title:'"src/main/graphql/com/example/LaunchDetails.graphql"'},"query LaunchDetails($id:ID!) {\n  launch(id: $id) {\n    id\n    site\n    mission {\n      name\n      missionPatch(size:LARGE)\n    }\n  }\n}\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Build your project, this will generate the model")))}d.isMDXComponent=!0},67714:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={},l=void 0,i={unversionedId:"api-integration/graphql/shared/api-secret-note",id:"api-integration/graphql/shared/api-secret-note",title:"api-secret-note",description:"Always remember to replace API_SECRET with the correct value that you copied from apito console.",source:"@site/docs/api-integration/graphql/shared/api-secret-note.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/api-secret-note",permalink:"/docs/api-integration/graphql/shared/api-secret-note",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/api-secret-note.mdx",tags:[],version:"current",frontMatter:{}},s={},p=[],u={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always remember to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"API_SECRET")," with the correct value that you copied from apito console.\nGo to ",(0,r.kt)("a",{parentName:"p",href:"/docs/console/api-integration-with-your-application"},"this page")," if you do not know where to find your api secrets for your project")))}d.isMDXComponent=!0},9833:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=a(87462),r=(a(67294),a(3905)),o=a(67714);const l={},i=void 0,s={unversionedId:"api-integration/graphql/shared/download-schema",id:"api-integration/graphql/shared/download-schema",title:"download-schema",description:"Apollo Android requires your GraphQL server's schema as a schema.json file. You can obtain the contents of this file by running an introspection query on your server.",source:"@site/docs/api-integration/graphql/shared/download-schema.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/download-schema",permalink:"/docs/api-integration/graphql/shared/download-schema",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/download-schema.mdx",tags:[],version:"current",frontMatter:{}},p={},u=[],d={toc:u};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Apollo Android requires your GraphQL server's schema as a ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.json")," file. You can obtain the contents of this file by running an introspection query on your server."),(0,r.kt)("p",null,"The Apollo Gradle plugin exposes a ",(0,r.kt)("inlineCode",{parentName:"p"},"downloadApolloSchema")," task to help you obtain your schema. Provide this task your server's GraphQL endpoint and the output location for the ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.json")," file:"),(0,r.kt)(o.default,{mdxType:"ApiSecretNote"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="shell"',title:'"shell"'},'./gradlew downloadApolloSchema \\\n  --endpoint="https://api.apito.io/secured/graphql" \\\n  --schema="app/src/main/graphql/com/example" \\\n  --header="Authorization: Bearer API_SECRET"\n')))}c.isMDXComponent=!0}}]);