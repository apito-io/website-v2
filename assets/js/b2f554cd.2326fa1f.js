"use strict";(self.webpackChunkapito_website_v_2=self.webpackChunkapito_website_v_2||[]).push([[1477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"build-api-easily-on-cloud-using-apito","metadata":{"permalink":"/blog/build-api-easily-on-cloud-using-apito","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-03-03-build-api-easily-on-cloud-using-apito.md","source":"@site/blog/2022-03-03-build-api-easily-on-cloud-using-apito.md","title":"Build API Easily on Cloud using Apito","description":"Apito is a Cloud based Service that helps you build API easily. You can think of it as a firebase alternative.","date":"2022-03-03T00:00:00.000Z","formattedDate":"March 3, 2022","tags":[{"label":"fahim","permalink":"/blog/tags/fahim"}],"readingTime":3.755,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"build-api-easily-on-cloud-using-apito","title":"Build API Easily on Cloud using Apito","tags":["fahim"]},"nextItem":{"title":"REST API vs GraphQL | Why not Both!","permalink":"/blog/rest-api-vs-graphql-a-detailed-comparison"}},"content":"Apito is a Cloud based Service that helps you build API easily. You can think of it as a firebase alternative.\\nThis guide will show you how you can use Apito to build API for your next project or application.\\n\\n![Apito Console](https://cdn.apito.io/media/apito_documentation/2K07YCORYV_Apito_Console.png)\\n\\nIf you havent already created an account in apito please go to [this link](https://app.apito.io) and create one.\\nOnce you logged in to `Apito Console` you will a Project Space like above. You can use this space to switch between \\nyour projects or create a new one.\\n\\nNow, for this quick started guide I will be creating an API for an ecommerce project, so lets gets started.\\n\\n## 1. Create your project\\n\\nClick on the Start a new Project button to initialize your project creation. Enter your project name and description \\nand click Continue. On the next page select Apito Cloud option to create your project faster. Other Database \\noptions will soon be available. Congratulation! you project is being build. Once it\u2019s done you can click\\nExplore new project to switch to your newly created project and start building your API instantly.\\n\\n![Apito Create a Project](https://cdn.apito.io/media/apito_documentation/NW09WSY56N_Create_Project.png)\\n\\nThe first step after creating your project is to define your project models. The most important part of designing an \\nAPI is Database Modeling. Let\u2019s start by creating our first model. We all know Products and categories are a crucial part of an ecommerce API.\\n\\n## 2. Model your Database with models & fields\\n\\nClick on the Models Tab in the top navigation menu. Then from the left side bar, click on Add a model button.\\nNow, write down the name of the model, in our case it will be product. Now click on the create button.\\n\\n![Database Model Creation](https://cdn.apito.io/media/apito_documentation/OUHYWT8VH4_Create_Model.png)\\n\\nNext, we will add few fields to our newly created product model.\\n\\n### Fields\\n\\nTo add fields to a model click on the Add a Field button. First, we will add a title field of\\ntype text and we will set the attribute of the title to required. Then, a description field of type, Rich Text. \\nAn Image field of type, Media. A Price field of type, Number. And last but not least a Rating field of type, Number. \\nNow let\u2019s create another model named Category and add few fields in it. Those fields will be name, label and icons. \\nApito model & field builder is very versatile you can use it to design complex and nested model structure.\\n\\n### Relations\\n\\nNext, we will create relations between them. For that you need to click on the\\nAdd Field Button and then select Relations. Your relation creation between models depends on your project requirements.\\n\\n![Database Relations](https://cdn.apito.io/media/apito_documentation/G7NHVB7U6I_Add_Fields.png)\\n\\nFor now, let\u2019s say, Product has many categories and categories has many products. Wow, as you can see, how easy it is to create entity relations between models in apito.\\nAlso, you can rename, delete and create fields & relations anytime you want. Now, that our database design of product and category model with relation is created,\\nwe are ready to insert some contents.\\n\\n## 3. Insert your content\\n\\nClick on the Contents tab and select your model. As you can see, Table and forms are auto generated based on your database model design.\\nLet me insert few products and categories into our database. To add a new product, click on the Add a new product button, which is on the right side of the product content table.\\nYou will be able to see a drawer pops up from the right side of our table, which contains an auto generated specialized input form based on your model design.\\n\\n![Content Management](https://cdn.apito.io/media/apito_documentation/JB6YZSJ7ZE_Add_A_Content.png)\\n\\nLet\u2019s add our first product using this form into our database. Let\u2019s add our first category into our database.\\nAs you can see while creating a category you can directly tag products with it. As you can see that product and category are now linked with each other.\\n\\n## 4. Explore Both GraphQL & REST API\\n\\nOur Ecommerce API is ready. To explore our API lets goto the `API Explorer` from the top of the navigation menu. As you can see, our GraphQL & REST API is ready for use.\\nLet\u2019s run our first query. We will now `Search a product that contains blue in its name`. Now click Run and as you can see its working! our ecommerce API is ready for integration.\\n\\n![GraphQL Explorer](https://cdn.apito.io/media/apito_documentation/0X6Z0YYA1V_GraphQL_Explorer.png)\\n\\nYou can also use REST API if you project requires it. Apito Generates a Swagger Documentation which is compatible with OpenAPI.\\n\\n![Swagger UI](https://cdn.apito.io/media/apito_documentation/09SNMJMSIX_RESTful_API_Explorer.png)"},{"id":"rest-api-vs-graphql-a-detailed-comparison","metadata":{"permalink":"/blog/rest-api-vs-graphql-a-detailed-comparison","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-02-08-rest-api-vs-graphql-a-detailed-comparison.md","source":"@site/blog/2022-02-08-rest-api-vs-graphql-a-detailed-comparison.md","title":"REST API vs GraphQL | Why not Both!","description":"Recently GraphQL is becoming the buzzword in the developer community. Although building a GraphQL server was very","date":"2022-02-08T00:00:00.000Z","formattedDate":"February 8, 2022","tags":[{"label":"fahim","permalink":"/blog/tags/fahim"}],"readingTime":0.87,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"rest-api-vs-graphql-a-detailed-comparison","title":"REST API vs GraphQL | Why not Both!","tags":["fahim"]},"prevItem":{"title":"Build API Easily on Cloud using Apito","permalink":"/blog/build-api-easily-on-cloud-using-apito"},"nextItem":{"title":"Firebase vs Apito a Quick Comparison","permalink":"/blog/firebase-vs-apito-quick-comparison"}},"content":"Recently GraphQL is becoming the buzzword in the developer community. Although building a GraphQL server was very \\ndifficult in the past, nowadays with overall community support and developer tools, I can say it\'s rather very \\neasy to build one than to build an old-fashioned Rest API.\\n\\nWhen it comes to choosing which protocol to choose for your next project, nowadays people often get confused between \\nRest API & GraphQL, I say, don\'t get confused and it depends. There are many aspects where using GraphQL is \\noverkill and many cases where GraphQL will thrive over REST API. Let\'s discuss what\'s what throughout the post\\n\\n\\n---\\n\\nLet\'s discuss what\'s what throughout the post\\n\\n---\\n\\n---\\n\\nREST has some limitations.\\n\\n1. REST is rigid, requiring different endpoints for different responses.\\n2. Teams with back-end and front-end devs need to coordinate any change, increasing the complexity of the \\n   development effort\\n3. Endpoints have a predefined response - often returning more data than needed and consuming precious bandwidth. \\n   \\n\\nLet\'s talk about the REST API first and why it\'s awesome!"},{"id":"firebase-vs-apito-quick-comparison","metadata":{"permalink":"/blog/firebase-vs-apito-quick-comparison","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-09-12-firebase-vs-apito-quick-comparison.md","source":"@site/blog/2021-09-12-firebase-vs-apito-quick-comparison.md","title":"Firebase vs Apito a Quick Comparison","description":"Internet is filled with tons of articles and tutorials that talk about building production-ready and scalable apps","date":"2021-09-12T00:00:00.000Z","formattedDate":"September 12, 2021","tags":[{"label":"fahim","permalink":"/blog/tags/fahim"}],"readingTime":5.7,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"firebase-vs-apito-quick-comparison","title":"Firebase vs Apito a Quick Comparison","tags":["fahim"]},"prevItem":{"title":"REST API vs GraphQL | Why not Both!","permalink":"/blog/rest-api-vs-graphql-a-detailed-comparison"}},"content":"Internet is filled with tons of articles and tutorials that talk about building production-ready and scalable apps \\nfor both web and mobile. Developers often time get caught up trying to apply the same principle or guide but often time \\nthey ended up \\"re-inventing the wheel\\" Apito and Firebase both come with Backend as a Service (BaaS) APIs that help \\nyou develop your application faster. A key component of any BaaS is instant APIs over a database \\n\\n- once you define your database schema, you should get data APIs instantly.\\n  \\n## Comparing Apples to Applesauce\\n\\nApito and Firebase both offer APIs over a database while both of them provide this solution on top of a proprietary \\ndatabase. We use nn optimized version of RocksDB. Soon Apito will be able to connect to several popular choices of \\ndatabases including PostgreSQL, MySQL, Mariadb, Mongodb & ArangoDB. That is a topic of another discussion.\\n\\nFirebase was originally designed exclusively as a realtime database. If your project does not need a real-time database \\nthen using it is exteamly difficult for modern application development. \\n\\nLet me tell you why, \\n\\nQuerying & Filtering your data is very difficult with Firebase, wherewith Apito you can execute bulk queries with complex \\nfilters ( even geospatial queries ) Also, Once an application is in production, you will need to write complex queries, \\nespecially for the purpose of Analytics or Business Intelligence. With Firebase, you are restricted to basic CRUD queries.\\nThis is okay for rapid prototyping but does not lend itself to a production app.\\n\\n### Database Design, Migration & Content Management\\n\\nThis is probably one of the biggest gripes power users have with Firebase. On Firebase, you can only change data from\\nthe client-side. This means you have to write a script to perform a schema evolution (which is error-prone and \\nrisky if not performed in a transaction, or in sets of transactions) or handle the schema evolution in the app code \\nitself! \\n\\nBut on the other hand, On Apito, Migration happens instantly once you modify your model and publish it. This is similar\\nto the natural developer workflow of taking changes in dev and then applying them in staging/production environments.\\n\\n### Data modeling\\n\\nThanks to Apito\'s Versatile Model Builder, it supports various fields to model and structures your project, \\nfor example, Single Line Text Field, Date Field, Number Field, Fields within Fields ( Array of Object) and \\nthe Most important feature is the relation between models ( One-to-One, One-to-Many, Many-to-Many )\\nIt is harder to model relationships between independent data models with Firebase\'s proprietary database \\n(originally a realtime database). If you made a mistake early on in your modelling, migrating and changing \\nto a new data model is hard.\\n\\n### Role based Permissions\\n\\nFirebase permissions can only capture rules based on the data within the current \'path\' (node). \\n\\nOn Apito, you can specify granular permissions based on roles. That can be attatched to any API endpoints & models. \\n[Read more here.](/docs/console/adding-rbac-role-based-permissions-support-to-your-api)\\n\\n### A Back-end for SaaS Apps\\n\\nFirebase is a well-known backend-as-a-service. It has a ton of useful features that can all be tuned and tweaked to power\\nthe back-end of a SaaS application. That said, they\'ve made a much larger effort to be the cloud back-end for mobile apps.\\nAs a developer building SaaS, you can configure Firebase services to suit your requirements, but it\'s always going to \\nbe extra work. With Apito, that\'s pretty different. 8base designed its platform to best accommodate SaaS apps from day\\none; with a GraphQL API for any web-client, or mobile, to consume. This naturally makes it ideal for developers \\nlooking for a backend-as-a-service on any SaaS project. Why? Because things like authorization, multi-tenancy, \\nuser administration, and a relational schema builder are all native to the platform.\\n\\n## To summarize our points, Apito has many advantages including\\n\\n* Easy Learning Curve\\n* Versatile Database Modeling\\n* Robust Content Management System\\n* Complex Query & Filtering\\n* Role based Permissions\\n* Build In Support for Multilingual Content\\n* Instant GraphQL & REST API Endpoints\\n* Webhooks\\n* Authentication Module\\n* Cloud Functions\\n  \\n![Apito vs Firebase Comparison](https://cdn.apito.io/media/apito_documentation/XJUZG5CEW9_Apito_Vs_Firebase.png)\\n\\n### GraphQL or RESTful API? Why not Both?\\n\\nToday, almost all apps are data-driven. Making sure a developer has access to the data they need when they need it, and \\nas they need it, is super important. For the past decade, REST has been the API standard. While the world has benefited \\nhugely from REST, it has some limitations. GraphQL, on the other hand, comes with some huge advantages when compared \\nto REST. A single endpoint can support any query or mutation (a.k.a. update). \\n\\nQueries get defined on the client-side, meaning no more endpoint updates done by backend developers.\\nQueries only return data that the developer wants.\\nOut of the box, Firebase lets users build REST endpoints. You can set up a GraphQL engine on Firebase, but it takes a lot of time and a lot of know-how.\\n\\n### Role-Based Security\\n\\nMeanwhile, as everyone is out there building the sleekest, and most straightforward user interface that enchants\\nthe pants off users, app security is too often being overlooked. That\'s why Firebase and Apito have security built \\ndirectly into their products. Firebase offers the ability to set up role-based security using custom functions that \\nget stored as rules. Every rule is then validated against each API requests. \\n\\nThe developer can define all their custom authentication logic. Apito built role-based security directly into its \\nplatform, and expose that to developers through a configurable interface. It makes adding permissions and roles for \\nspecific actions on specific tables and fields super straight forward. It also supports role-based scoping of records \\nusing custom filters. Pretty much, if developers follow either platform\'s documentation around how to set up \\nauthorization, they won\'t have to worry about security. It\'s just up to them how long they want to take to get there.\\n\\n### Conclusion\\n\\nThere are millions of developers in the world, each with their nuanced preferences to specific stacks and tools. \\nIn the greater software ecosystem, 1000s of tools and services exist to help support developers in building amazing \\napps. Of all the tools, services, frameworks, platforms, and specifications, only a few stand out. \\n\\nApito gives developers a back-end they need when building modern apps, the way that they would have wanted to build it themselves.\\nBy configuring dozens of clutch back-end resources and offering them as a production-ready platform, you can easily write\\nyour project-specific business logic with cloud function Knowing the whole time that security, scalability, database management, \\nand the like are future proof.\\n\\nA developer is going to come across both Apito and Firebase when researching backend-as-a-service platforms. Both\\nplatforms are going to offer them similar features that are backed by different implementations. That said, the experience\\nthat the developer has when using either platform is the real acid test."}]}')}}]);