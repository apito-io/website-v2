"use strict";(self.webpackChunkapito_website_v_2=self.webpackChunkapito_website_v_2||[]).push([[5770],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,ah:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,m=h["".concat(l,".").concat(d)]||h[d]||c[d]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},35668:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={id:"gatsby-cms-with-graphql",title:"Integrate Gatsby with Apito",sidebar_label:"Gatsby"},i=void 0,s={unversionedId:"frameworks/gatsby-cms-with-graphql",id:"frameworks/gatsby-cms-with-graphql",title:"Integrate Gatsby with Apito",description:"Gatsby is the fast and flexible framework that makes building websites with any CMS, API, or database fun again.",source:"@site/docs/frameworks/gatsby.mdx",sourceDirName:"frameworks",slug:"/frameworks/gatsby-cms-with-graphql",permalink:"/docs/frameworks/gatsby-cms-with-graphql",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frameworks/gatsby.mdx",tags:[],version:"current",frontMatter:{id:"gatsby-cms-with-graphql",title:"Integrate Gatsby with Apito",sidebar_label:"Gatsby"},sidebar:"docs",previous:{title:"Framework Integration",permalink:"/docs/category/framework-integration"},next:{title:"VueJS",permalink:"/docs/frameworks/vuejs-integration-with-graphql"}},l={},p=[{value:"The best Headless CMS for Gatsby",id:"the-best-headless-cms-for-gatsby",level:2},{value:"Apito with Gatsby benefits",id:"apito-with-gatsby-benefits",level:2},{value:"Automate builds using Webhooks",id:"automate-builds-using-webhooks",level:2},{value:"Getting Started with Gatsby",id:"getting-started-with-gatsby",level:2},{value:"Install",id:"install",level:2},{value:"How to Query",id:"how-to-query",level:2},{value:"Schema definitions",id:"schema-definitions",level:2},{value:"Composing Apollo Links for production network setup",id:"composing-apollo-links-for-production-network-setup",level:2},{value:"Refetching data",id:"refetching-data",level:2},{value:"Performance tuning",id:"performance-tuning",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Gatsby is the fast and flexible framework that makes building websites with any CMS, API, or database fun again."),(0,r.kt)("h2",{id:"the-best-headless-cms-for-gatsby"},"The best Headless CMS for Gatsby"),(0,r.kt)("p",null,"Apito is a powerful headless cms to maintain and manage your Gatsby static site. it can deliver your content with GraphQL."),(0,r.kt)("p",null,"Gatsby automates code-splitting, image optimization, inlining critical styles, lazy-loading, and prefetching resources, and more to ensure your site is fast.\nYou can read more about why you should use gatsby ",(0,r.kt)("a",{parentName:"p",href:"https://www.gatsbyjs.com/why-gatsby/"},"here")),(0,r.kt)("h2",{id:"apito-with-gatsby-benefits"},"Apito with Gatsby benefits"),(0,r.kt)("p",null,"Being a static site generator brings a lot of advantages: Performance, security, lower cost of scaling but also an excellent developer experience."),(0,r.kt)("p",null,"Gatsby brings huge benefits to content creators and developers by helping to solve many of the challenges with the headless approach."),(0,r.kt)("p",null,"Apito provides a perfect solution as a source for Gatsby\u2019s static markup generation. Whether building a static site, or a more dynamic app/website\nApito has you covered with its flexibility of content types, plugins, and customization."),(0,r.kt)("h2",{id:"automate-builds-using-webhooks"},"Automate builds using Webhooks"),(0,r.kt)("p",null,"You Take advantage of the built-in webhook feature that will allow you to automatically build your Gatsby project upon the update of your data."),(0,r.kt)("p",null,"[pic]"),(0,r.kt)("h2",{id:"getting-started-with-gatsby"},"Getting Started with Gatsby"),(0,r.kt)("p",null,"Follow the integration guide from our documentation to see how to consume Strapi's Content Type's API from Gatsby. As a Static Site Generator,\nGatsby will fetch your content from Strapi at build time. Therefore, you need to configure Gatsby to communicate with your Strapi application"),(0,r.kt)("p",null,"First run this following command"),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install gatsby-source-graphql\n")),(0,r.kt)("p",null,"We recommend using dotenv, which will then expose environment variables. Read more about dotenv and using environment variables here.\nThen we can use these environment variables via process.env and configure our plugin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="gatsby-config.js"',title:'"gatsby-config.js"'},'    {\n      resolve: "gatsby-source-graphql",\n      options: {\n        typeName: "Apito",\n        fieldName: "apito",\n        url: "https://api.github.com/graphql",\n        // HTTP headers\n        headers: {\n          // Learn about environment variables: https://gatsby.dev/env-vars\n          Authorization: `Bearer ${process.env.GRAPHQLI_TOKEN}`,\n        },\n        // HTTP headers alternatively accepts a function (allows async) | use the above or this one. Dont use both\n        headers: async () => {\n          return {\n            Authorization: await getAuthorizationToken(),\n          }\n        },\n        // Additional options to pass to node-fetch\n        fetchOptions: {},\n      },\n    },\n')),(0,r.kt)("h2",{id:"how-to-query"},"How to Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  # This is the fieldName you've defined in the config\n  features {\n    modules {\n      name\n    }\n  }\n  github {\n    viewer {\n      email\n    }\n  }\n}\n")),(0,r.kt)("h2",{id:"schema-definitions"},"Schema definitions"),(0,r.kt)("p",null,"By default, the schema is introspected from the remote schema. The schema is cached in the ",(0,r.kt)("inlineCode",{parentName:"p"},".cache")," directory, and refreshing the schema requires\ndeleting the cache (e.g. by restarting gatsby develop)."),(0,r.kt)("p",null,"To control schema consumption, you can alternatively construct the schema definition by passing a createSchema callback. This way you could, for example,\nread schema SDL or introspection JSON. When the createSchema callback is used, the schema isn\u2019t cached. createSchema can return a\nGraphQLSchema instance, or a Promise resolving to one."),(0,r.kt)("p",null,"You can use this method if your schema changes regularly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs")\nconst { buildSchema, buildClientSchema } = require("graphql")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: "gatsby-source-graphql",\n      options: {\n        typeName: "Apito",\n        fieldName: "apito",\n        url: "https://api.apito.io/secured/graphql",\n        headers: {\n          // Learn about environment variables: https://gatsby.dev/env-vars\n          Authorization: `Bearer ${process.env.GRAPHQLI_TOKEN}`,\n        },\n        createSchema: async () => {\n          const json = JSON.parse(\n            fs.readFileSync(`${__dirname}/introspection.json`)\n          )\n          return buildClientSchema(json.data)\n        },\n      },\n    },\n    {\n      resolve: "gatsby-source-graphql",\n      options: {\n        typeName: "Apito",\n        fieldName: "apito",\n        url: "https://api.apito.io/secured/graphql",\n        headers: {\n          // Learn about environment variables: https://gatsby.dev/env-vars\n          Authorization: `Bearer ${process.env.GRAPHQLI_TOKEN}`,\n        },\n        createSchema: async () => {\n          const sdl = fs.readFileSync(`${__dirname}/schema.sdl`).toString()\n          return buildSchema(sdl)\n        },\n      },\n    },\n  ],\n}\n')),(0,r.kt)("h2",{id:"composing-apollo-links-for-production-network-setup"},"Composing Apollo Links for production network setup"),(0,r.kt)("p",null,"Network requests can fail, return errors or take too long. Use ",(0,r.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/api/link/introduction/"},"Apollo Link")," to\nadd retries, error handling, logging and more to your GraphQL requests."),(0,r.kt)("p",null,"Use the plugin's ",(0,r.kt)("inlineCode",{parentName:"p"},"createLink")," option to add a custom Apollo Link to your GraphQL requests."),(0,r.kt)("p",null,"You can compose different types of links, depending on the functionality you're trying to achieve.\nThe most common links are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@apollo/client/link/retry")," for retrying queries that fail or time out"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@apollo/client/link/error")," for error handling"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@apollo/client/link/http")," for sending queries in http requests (used by default)")),(0,r.kt)("p",null,"For more explanation of how Apollo Links work together, check out this Medium article: ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@joanvila/productionizing-apollo-links-4cdc11d278eb"},"Productionizing Apollo Links"),"."),(0,r.kt)("p",null,"Here's an example of using the HTTP link with retries (using ",(0,r.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/api/link/apollo-link-retry/"},"@apollo/client/link/retry"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// gatsby-config.js\nconst { createHttpLink, from } = require(`@apollo/client`)\nconst { RetryLink } = require(`@apollo/client/link/retry`)\n\nconst retryLink = new RetryLink({\n  delay: {\n    initial: 100,\n    max: 2000,\n    jitter: true,\n  },\n  attempts: {\n    max: 5,\n    retryIf: (error, operation) =>\n      Boolean(error) && ![500, 400].includes(error.statusCode),\n  },\n})\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: "gatsby-source-graphql",\n      options: {\n        typeName: "Graphqli",\n        fieldName: "apito",\n        url: "https://api.apito.io/secured/graphql",\n        headers: {\n          // Learn about environment variables: https://gatsby.dev/env-vars\n          Authorization: `Bearer ${process.env.GRAPHQLI_TOKEN}`,\n        },\n        // `pluginOptions`: all plugin options\n        //   (i.e. in this example object with keys `typeName`, `fieldName`, `url`, `createLink`)\n        createLink: pluginOptions =>\n          from([retryLink, createHttpLink({ uri: pluginOptions.url })]),\n      },\n    },\n  ],\n}\n')),(0,r.kt)("h2",{id:"refetching-data"},"Refetching data"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"gatsby-source-graphql")," will only refetch the data once the server is restarted. It's also possible to configure the plugin to periodically refetch the data.\nThe option is called ",(0,r.kt)("inlineCode",{parentName:"p"},"refetchInterval")," and specifies the timeout in seconds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  plugins: [\n    // Simple config, passing URL\n    {\n      resolve: "gatsby-source-graphql",\n      options: {\n        // Arbitrary name for the remote schema Query type\n        typeName: "Graphqli",\n        // Field under which the remote schema will be accessible. You\'ll use this in your Gatsby query\n        fieldName: "apito",\n        // Url to query from\n        url: "https://api.apito.io/secured/graphql",\n        headers: {\n          // Learn about environment variables: https://gatsby.dev/env-vars\n          Authorization: `Bearer ${process.env.GRAPHQLI_TOKEN}`,\n        },\n        // refetch interval in seconds\n        refetchInterval: 60,\n      },\n    },\n  ],\n}\n')),(0,r.kt)("h2",{id:"performance-tuning"},"Performance tuning"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"gatsby-source-graphql")," executes each query in a separate network request.\nBut the plugin also supports query batching to improve query performance."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Caveat"),": Batching is only possible for queries starting at approximately the same time. In other words\nit is bounded by the number of parallel GraphQL queries executed by Gatsby (by default it is ",(0,r.kt)("strong",{parentName:"p"},"4"),")."),(0,r.kt)("p",null,"Fortunately, we can increase the number of queries executed in parallel by setting the ",(0,r.kt)("a",{parentName:"p",href:"https://gatsby.dev/env-vars"},"environment variable"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY")," to a higher value and setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"batch")," option of the plugin\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cross-env GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY=20 gatsby develop\n")),(0,r.kt)("p",null,"With plugin config:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs")\nconst { buildSchema, buildClientSchema } = require("graphql")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: "gatsby-source-graphql",\n      options: {\n        typeName: "Graphqli",\n        fieldName: "apito",\n        url: "https://api.apito.io/secured/graphql",\n        batch: true,\n      },\n    },\n  ],\n}\n')),(0,r.kt)("p",null,"By default, the plugin batches up to 5 queries. You can override this by passing\n",(0,r.kt)("inlineCode",{parentName:"p"},"dataLoaderOptions")," and set a ",(0,r.kt)("inlineCode",{parentName:"p"},"maxBatchSize"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs")\nconst { buildSchema, buildClientSchema } = require("graphql")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: "gatsby-source-graphql",\n      options: {\n        typeName: "Graphqli",\n        fieldName: "apito",\n        url: "https://api.apito.io/secured/graphql",\n        batch: true,\n        // See https://github.com/graphql/dataloader#new-dataloaderbatchloadfn--options\n        // for a full list of DataLoader options\n        dataLoaderOptions: {\n          maxBatchSize: 10,\n        },\n      },\n    },\n  ],\n}\n')),(0,r.kt)("p",null,"Having 20 parallel queries with 5 queries per batch means we are still running 4 batches\nin parallel."),(0,r.kt)("p",null,"Each project is unique so try tuning those two variables and see what works best for you.\nWe've seen up to 5-10x speed-up for some setups."))}c.isMDXComponent=!0}}]);