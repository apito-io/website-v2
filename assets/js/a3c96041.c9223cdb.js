"use strict";(self.webpackChunkapito_website_v_2=self.webpackChunkapito_website_v_2||[]).push([[6982,1423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,ah:()=>s,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=r,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},28108:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),i=n(67714);const o={sidebar_label:"Ruby",title:"GraphQL API Integration with Ruby Project"},l=void 0,p={unversionedId:"api-integration/graphql/integration-with-ruby",id:"api-integration/graphql/integration-with-ruby",title:"GraphQL API Integration with Ruby Project",description:"GraphQL Client by GitHub is a Ruby library for declaring, composing and executing GraphQL queries.",source:"@site/docs/api-integration/graphql/integration-with-ruby.mdx",sourceDirName:"api-integration/graphql",slug:"/api-integration/graphql/integration-with-ruby",permalink:"/docs/api-integration/graphql/integration-with-ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/integration-with-ruby.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Ruby",title:"GraphQL API Integration with Ruby Project"},sidebar:"docs",previous:{title:"Python",permalink:"/docs/api-integration/graphql/integration-with-python"},next:{title:"Extending Apito",permalink:"/docs/category/extending-apito"}},s={},u=[{value:"Installation",id:"installation",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Defining Queries",id:"defining-queries",level:3},{value:"Executing queries",id:"executing-queries",level:3},{value:"Detailed Guide",id:"detailed-guide",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("meta",{property:"og:type",content:"article"})),(0,r.kt)("p",null,"GraphQL Client by GitHub is a Ruby library for declaring, composing and executing GraphQL queries."),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-client")," to your Gemfile and then run ",(0,r.kt)("inlineCode",{parentName:"p"},"bundle install"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# Gemfile\ngem 'graphql-client'\n")),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"Sample configuration for a GraphQL Client to query from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/swapi-graphql"},"SWAPI GraphQL Wrapper"),"."),(0,r.kt)(i.default,{mdxType:"ApiSecretNote"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'require "graphql/client"\nrequire "graphql/client/http"\n\n# Star Wars API example wrapper\nmodule SWAPI\n  # Configure GraphQL endpoint using the basic HTTP network adapter.\n  HTTP = GraphQL::Client::HTTP.new("https://api.apito.io/secured/graphql") do\n    def headers(context)\n      # Must Set the Authorization Headers\n      { "Authorization": "Bearer API_SECRET" }\n    end\n  end\n\n  # Fetch latest schema on init, this will make a network request\n  Schema = GraphQL::Client.load_schema(HTTP)\n\n  # However, it\'s smart to dump this to a JSON file and load from disk\n  #\n  # Run it from a script or rake task\n  #   GraphQL::Client.dump_schema(SWAPI::HTTP, "path/to/schema.json")\n  #\n  # Schema = GraphQL::Client.load_schema("path/to/schema.json")\n\n  Client = GraphQL::Client.new(schema: Schema, execute: HTTP)\nend\n')),(0,r.kt)("h3",{id:"defining-queries"},"Defining Queries"),(0,r.kt)("p",null,"If you haven't already, ",(0,r.kt)("a",{parentName:"p",href:"http://graphql.org/docs/queries/"},"familiarize yourself with the GraphQL query syntax"),". Queries are declared with the same syntax inside of a ",(0,r.kt)("inlineCode",{parentName:"p"},"<<-'GRAPHQL'")," heredoc. There isn't any special query builder Ruby DSL."),(0,r.kt)("p",null,"This client library encourages all GraphQL queries to be declared statically and assigned to a Ruby constant."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"HeroNameQuery = SWAPI::Client.parse <<-'GRAPHQL'\n  query {\n    hero {\n      name\n    }\n  }\nGRAPHQL\n")),(0,r.kt)("p",null,"Queries can reference variables that are passed in at query execution time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"HeroFromEpisodeQuery = SWAPI::Client.parse <<-'GRAPHQL'\n  query($episode: Episode) {\n    hero(episode: $episode) {\n      name\n    }\n  }\nGRAPHQL\n")),(0,r.kt)("p",null,"Fragments are declared similarly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"HumanFragment = SWAPI::Client.parse <<-'GRAPHQL'\n  fragment on Human {\n    name\n    homePlanet\n  }\nGRAPHQL\n")),(0,r.kt)("p",null,"To include a fragment in a query, reference the fragment by constant."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'HeroNameQuery = SWAPI::Client.parse <<-\'GRAPHQL\'\n  {\n    luke: human(id: "1000") {\n      ...HumanFragment\n    }\n    leia: human(id: "1003") {\n      ...HumanFragment\n    }\n  }\nGRAPHQL\n')),(0,r.kt)("p",null,"This works for namespaced constants."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'module Hero\n  Query = SWAPI::Client.parse <<-\'GRAPHQL\'\n    {\n      luke: human(id: "1000") {\n        ...Human::Fragment\n      }\n      leia: human(id: "1003") {\n        ...Human::Fragment\n      }\n    }\n  GRAPHQL\nend\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"::")," is invalid in regular GraphQL syntax, but ",(0,r.kt)("inlineCode",{parentName:"p"},"#parse")," makes an initial pass on the query string and resolves all the fragment spreads with ",(0,r.kt)("a",{parentName:"p",href:"http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html#method-i-constantize"},(0,r.kt)("inlineCode",{parentName:"a"},"constantize")),"."),(0,r.kt)("h3",{id:"executing-queries"},"Executing queries"),(0,r.kt)("p",null,"Pass the reference of a parsed query definition to ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL::Client#query"),". Data is returned back in a wrapped ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL::Client::Schema::ObjectType")," struct that provides Ruby-ish accessors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'result = SWAPI::Client.query(Hero::Query)\n\n# The raw data is Hash of JSON values\n# result["data"]["luke"]["homePlanet"]\n\n# The wrapped result allows to you access data with Ruby methods\nresult.data.luke.home_planet\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL::Client#query")," also accepts variables and context parameters that can be leveraged by the underlying network executor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'result = SWAPI::Client.query(Hero::HeroFromEpisodeQuery, variables: {episode: "JEDI"}, context: {user_id: current_user_id})\n')),(0,r.kt)("h2",{id:"detailed-guide"},"Detailed Guide"),(0,r.kt)("p",null,"For a detailed guide, be sure to check out the official github page ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/github/graphql-client"},"here")))}d.isMDXComponent=!0},67714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"api-integration/graphql/shared/api-secret-note",id:"api-integration/graphql/shared/api-secret-note",title:"api-secret-note",description:"Always remember to replace API_SECRET with the correct value that you copied from apito console.",source:"@site/docs/api-integration/graphql/shared/api-secret-note.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/api-secret-note",permalink:"/docs/api-integration/graphql/shared/api-secret-note",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/api-secret-note.mdx",tags:[],version:"current",frontMatter:{}},p={},s=[],u={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always remember to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"API_SECRET")," with the correct value that you copied from apito console.\nGo to ",(0,r.kt)("a",{parentName:"p",href:"/docs/console/api-integration-with-your-application"},"this page")," if you do not know where to find your api secrets for your project")))}c.isMDXComponent=!0}}]);