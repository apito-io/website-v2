"use strict";(self.webpackChunkapito_website_v_2=self.webpackChunkapito_website_v_2||[]).push([[8433,2975,7057,1423],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,ah:()=>p,kt:()=>h});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),p=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},u=function(e){var a=p(e.components);return r.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(t),h=n,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||o;return t?r.createElement(m,l(l({ref:a},u),{},{components:t})):r.createElement(m,l({ref:a},u))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},18679:(e,a,t)=>{t.d(a,{Z:()=>l});var r=t(67294),n=t(86010);const o="tabItem_Ymn6";function l(e){let{children:a,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(o,l),hidden:t},a)}},34259:(e,a,t)=>{t.d(a,{Z:()=>h});var r=t(87462),n=t(67294),o=t(86010),l=t(51048),i=t(33609),s=t(1943),p=t(72957);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){var a,t;const{lazy:l,block:c,defaultValue:h,values:m,groupId:g,className:y}=e,v=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:v.map((e=>{let{props:{value:a,label:t,attributes:r}}=e;return{value:a,label:t,attributes:r}})),k=(0,i.l)(f,((e,a)=>e.value===a.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===h?h:null!=(a=null!=h?h:null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)?a:v[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:q,setTabGroupChoices:w}=(0,s.U)(),[N,x]=(0,n.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:A}=(0,p.o5)();if(null!=g){const e=q[g];null!=e&&e!==N&&f.some((a=>a.value===e))&&x(e)}const C=e=>{const a=e.currentTarget,t=T.indexOf(a),r=f[t].value;r!==N&&(A(a),x(r),null!=g&&w(g,String(r)))},j=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{var r;const a=T.indexOf(e.currentTarget)+1;t=null!=(r=T[a])?r:T[0];break}case"ArrowLeft":{var n;const a=T.indexOf(e.currentTarget)-1;t=null!=(n=T[a])?n:T[T.length-1];break}}null==(a=t)||a.focus()};return n.createElement("div",{className:(0,o.Z)("tabs-container",u)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},y)},f.map((e=>{let{value:a,label:t,attributes:l}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===a?0:-1,"aria-selected":N===a,key:a,ref:e=>T.push(e),onKeyDown:j,onFocus:C,onClick:C},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":N===a})}),null!=t?t:a)}))),l?(0,n.cloneElement)(v.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},v.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==N})))))}function h(e){const a=(0,l.Z)();return n.createElement(c,(0,r.Z)({key:String(a)},e))}},23276:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>p,metadata:()=>d,toc:()=>h});var r=t(87462),n=(t(67294),t(3905)),o=t(34259),l=t(18679),i=t(9833),s=t(25917);const p={sidebar_label:"Java",title:"GraphQL API Integration with Java Project"},u=void 0,d={unversionedId:"api-integration/graphql/integration-with-java",id:"api-integration/graphql/integration-with-java",title:"GraphQL API Integration with Java Project",description:"Apollo Android is a GraphQL client that generates Java and Kotlin models from GraphQL queries. These models give you a type-safe API to work with GraphQL servers.",source:"@site/docs/api-integration/graphql/integration-with-java.mdx",sourceDirName:"api-integration/graphql",slug:"/api-integration/graphql/integration-with-java",permalink:"/docs/api-integration/graphql/integration-with-java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/integration-with-java.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Java",title:"GraphQL API Integration with Java Project"},sidebar:"docs",previous:{title:"GraphQL Client",permalink:"/docs/category/graphql-client"},next:{title:"Android (Kotlin)",permalink:"/docs/api-integration/graphql/integration-with-android"}},c={},h=[{value:"Add the Gradle plugin",id:"add-the-gradle-plugin",level:2},{value:"Add the runtime dependencies",id:"add-the-runtime-dependencies",level:2},{value:"Download your <code>schema.json</code> file",id:"download-your-schemajson-file",level:2},{value:"Add your query",id:"add-your-query",level:2},{value:"Executing your query",id:"executing-your-query",level:2}],m={toc:h};function g(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("head",null,(0,n.kt)("meta",{property:"og:type",content:"article"})),(0,n.kt)("p",null,"Apollo Android is a GraphQL client that generates Java and Kotlin models from GraphQL queries. These models give you a type-safe API to work with GraphQL servers."),(0,n.kt)("h2",{id:"add-the-gradle-plugin"},"Add the Gradle plugin"),(0,n.kt)("p",null,"In your app Gradle file, apply the ",(0,n.kt)("inlineCode",{parentName:"p"},"com.apollographql.apollo")," plugin:"),(0,n.kt)("p",null,"Using the ",(0,n.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block"},"plugins DSL"),":"),(0,n.kt)(o.Z,{defaultValue:"groovy",values:[{label:"groovy",value:"groovy"},{label:"kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"groovy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-groovy"},'plugins {\n    // ...\n    id("com.apollographql.apollo").version("x.y.z")\n}\n'))),(0,n.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    // ...\n    id("com.apollographql.apollo").version("x.y.z")\n}\n')))),(0,n.kt)("p",null,"Or using the ",(0,n.kt)("a",{parentName:"p",href:"https://docs.gradle.org/current/userguide/plugins.html#sec:old_plugin_application"},"legacy syntax"),":"),(0,n.kt)(o.Z,{defaultValue:"groovy",values:[{label:"groovy",value:"groovy"},{label:"kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"groovy",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-groovy"},'buildscript {\n  // ...\n  classpath("com.apollographql.apollo:apollo-gradle-plugin:x.y.z")\n}\n\napply plugin: "com.apollographql.apollo"\n'))),(0,n.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'buildscript {\n  // ...\n  classpath("com.apollographql.apollo:apollo-gradle-plugin:x.y.z")\n}\n\napply(plugin = "com.apollographql.apollo")\n')))),(0,n.kt)("p",null,"The plugin is hosted on the Gradle plugin portal, Jcenter and Maven Central."),(0,n.kt)("h2",{id:"add-the-runtime-dependencies"},"Add the runtime dependencies"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n  implementation("com.apollographql.apollo:apollo-runtime:x.y.z")\n}\n')),(0,n.kt)("h2",{id:"download-your-schemajson-file"},"Download your ",(0,n.kt)("inlineCode",{parentName:"h2"},"schema.json")," file"),(0,n.kt)(i.default,{mdxType:"DownloadSchema"}),(0,n.kt)("h2",{id:"add-your-query"},"Add your query"),(0,n.kt)(s.default,{mdxType:"AddQuery"}),(0,n.kt)("h2",{id:"executing-your-query"},"Executing your query"),(0,n.kt)("p",null,"You use an instance of the ",(0,n.kt)("inlineCode",{parentName:"p"},"ApolloClient")," class to interact with your server and cache."),(0,n.kt)("p",null,"To make a query using your generated models:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'// First, create an `ApolloClient`\n// Replace the serverUrl with your GraphQL endpoint\nApolloClient apolloClient = ApolloClient.builder()\n        .serverUrl("https://api.apito.io/secured/graphql")\n        .build();\n\n// Then enqueue your query\napolloClient.query(new LaunchDetailsQuery("83"))\n        .enqueue(new ApolloCall.Callback<LaunchDetailsQuery.Data>() {\n            @Override\n            public void onResponse(@NotNull Response<LaunchDetailsQuery.Data> response) {\n                Log.e("Apollo", "Launch site: " + response.getData().launch.site);\n            }\n\n            @Override\n            public void onFailure(@NotNull ApolloException e) {\n                Log.e("Apollo", "Error", e);\n            }\n        });\n')))}g.isMDXComponent=!0},25917:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(87462),n=(t(67294),t(3905));const o={},l=void 0,i={unversionedId:"api-integration/graphql/shared/add-query",id:"api-integration/graphql/shared/add-query",title:"add-query",description:"1. Create a directory for your GraphQL files: src/main/graphql/com/example/",source:"@site/docs/api-integration/graphql/shared/add-query.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/add-query",permalink:"/docs/api-integration/graphql/shared/add-query",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/add-query.mdx",tags:[],version:"current",frontMatter:{}},s={},p=[],u={toc:p};function d(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create a directory for your GraphQL files: ",(0,n.kt)("inlineCode",{parentName:"li"},"src/main/graphql/com/example/")),(0,n.kt)("li",{parentName:"ol"},"Add your ",(0,n.kt)("inlineCode",{parentName:"li"},"schema.json")," to the directory: ",(0,n.kt)("inlineCode",{parentName:"li"},"src/main/graphql/com/example/schema.json")),(0,n.kt)("li",{parentName:"ol"},"Put your query in a ",(0,n.kt)("inlineCode",{parentName:"li"},".graphql")," file, next to the schema: ",(0,n.kt)("inlineCode",{parentName:"li"},"src/main/graphql/com/example/LaunchDetails.graphql"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="src/main/graphql/com/example/LaunchDetails.graphql"',title:'"src/main/graphql/com/example/LaunchDetails.graphql"'},"query LaunchDetails($id:ID!) {\n  launch(id: $id) {\n    id\n    site\n    mission {\n      name\n      missionPatch(size:LARGE)\n    }\n  }\n}\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Build your project, this will generate the model")))}d.isMDXComponent=!0},67714:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(87462),n=(t(67294),t(3905));const o={},l=void 0,i={unversionedId:"api-integration/graphql/shared/api-secret-note",id:"api-integration/graphql/shared/api-secret-note",title:"api-secret-note",description:"Always remember to replace API_SECRET with the correct value that you copied from apito console.",source:"@site/docs/api-integration/graphql/shared/api-secret-note.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/api-secret-note",permalink:"/docs/api-integration/graphql/shared/api-secret-note",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/api-secret-note.mdx",tags:[],version:"current",frontMatter:{}},s={},p=[],u={toc:p};function d(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Always remember to replace ",(0,n.kt)("inlineCode",{parentName:"p"},"API_SECRET")," with the correct value that you copied from apito console.\nGo to ",(0,n.kt)("a",{parentName:"p",href:"/docs/console/api-integration-with-your-application"},"this page")," if you do not know where to find your api secrets for your project")))}d.isMDXComponent=!0},9833:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=t(87462),n=(t(67294),t(3905)),o=t(67714);const l={},i=void 0,s={unversionedId:"api-integration/graphql/shared/download-schema",id:"api-integration/graphql/shared/download-schema",title:"download-schema",description:"Apollo Android requires your GraphQL server's schema as a schema.json file. You can obtain the contents of this file by running an introspection query on your server.",source:"@site/docs/api-integration/graphql/shared/download-schema.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/download-schema",permalink:"/docs/api-integration/graphql/shared/download-schema",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/download-schema.mdx",tags:[],version:"current",frontMatter:{}},p={},u=[],d={toc:u};function c(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Apollo Android requires your GraphQL server's schema as a ",(0,n.kt)("inlineCode",{parentName:"p"},"schema.json")," file. You can obtain the contents of this file by running an introspection query on your server."),(0,n.kt)("p",null,"The Apollo Gradle plugin exposes a ",(0,n.kt)("inlineCode",{parentName:"p"},"downloadApolloSchema")," task to help you obtain your schema. Provide this task your server's GraphQL endpoint and the output location for the ",(0,n.kt)("inlineCode",{parentName:"p"},"schema.json")," file:"),(0,n.kt)(o.default,{mdxType:"ApiSecretNote"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="shell"',title:'"shell"'},'./gradlew downloadApolloSchema \\\n  --endpoint="https://api.apito.io/secured/graphql" \\\n  --schema="app/src/main/graphql/com/example" \\\n  --header="Authorization: Bearer API_SECRET"\n')))}c.isMDXComponent=!0}}]);