"use strict";(self.webpackChunkapito_website_v_2=self.webpackChunkapito_website_v_2||[]).push([[9594,1423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,ah:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,g=h["".concat(l,".").concat(m)]||h[m]||c[m]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},11157:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),i=n(67714);const o={sidebar_label:"PHP",title:"GraphQL API Integration with any PHP Project"},s=void 0,l={unversionedId:"api-integration/graphql/integration-with-php",id:"api-integration/graphql/integration-with-php",title:"GraphQL API Integration with any PHP Project",description:"There are 3 primary ways to use this package to generate your GraphQL queries:",source:"@site/docs/api-integration/graphql/integration-with-php.mdx",sourceDirName:"api-integration/graphql",slug:"/api-integration/graphql/integration-with-php",permalink:"/docs/api-integration/graphql/integration-with-php",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/integration-with-php.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"PHP",title:"GraphQL API Integration with any PHP Project"},sidebar:"docs",previous:{title:"React",permalink:"/docs/api-integration/graphql/integration-with-react"},next:{title:"Python",permalink:"/docs/api-integration/graphql/integration-with-python"}},p={},u=[{value:"Installation",id:"installation",level:2},{value:"Constructing The Client",id:"constructing-the-client",level:2},{value:"Running Queries",id:"running-queries",level:2},{value:"Running Raw Queries",id:"running-raw-queries",level:3},{value:"Result Formatting",id:"result-formatting",level:3},{value:"Passing Variables to Queries",id:"passing-variables-to-queries",level:3},{value:"Mutations",id:"mutations",level:2},{value:"Mutations With Variables Example",id:"mutations-with-variables-example",level:3},{value:"Detailed Guide",id:"detailed-guide",level:2}],c={toc:u};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("meta",{property:"og:type",content:"article"})),(0,r.kt)("p",null,"There are 3 primary ways to use this package to generate your GraphQL queries:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Query Class: Simple class that maps to GraphQL queries. It's designed to manipulate queries with ease and speed."),(0,r.kt)("li",{parentName:"ul"},"QueryBuilder Class: Builder class that can be used to generate Query objects dynamically. It's design to be used in cases where a query is being build in a dynamic fashion."),(0,r.kt)("li",{parentName:"ul"},"PHP GraphQL-OQM: An extension to this package. It Eliminates the need to write any GraphQL queries or refer to the API documentation or syntax. It generates query objects from the API schema, declaration exposed through GraphQL's introspection, which can then be simply interacted with.")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Run the following command to install the package using composer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ composer require gmostafa/php-graphql-client\n")),(0,r.kt)("h2",{id:"constructing-the-client"},"Constructing The Client"),(0,r.kt)("p",null,"A Client object can easily be instantiated by providing the GraphQL endpoint\nURL."),(0,r.kt)("p",null,'The Client constructor also receives an optional "authorizationHeaders"\narray, which can be used to add authorization headers to all requests being sent\nto the GraphQL server.'),(0,r.kt)(i.default,{mdxType:"ApiSecretNote"}),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$client = new Client(\n    'https://api.apito.io/secured/graphql',\n    ['Authorization' => 'Basic API_SECTET']\n);\n")),(0,r.kt)("p",null,'The Client constructor also receives an optional "httpOptions" array, which\n',(0,r.kt)("strong",{parentName:"p"},"overrides"),' the "authorizationHeaders" and can be used to add custom\n',(0,r.kt)("a",{parentName:"p",href:"https://guzzle.readthedocs.io/en/latest/request-options.html"},"Guzzle HTTP Client request options"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$client = new Client(\n    'https://api.apito.io/secured/graphql',\n    [],\n    [\n        'connect_timeout' => 5,\n        'timeout' => 5,\n        'headers' => [\n            'Authorization' => 'Basic API_SECTET'\n            'User-Agent' => 'testing/1.0',\n        ],\n        'proxy' => [\n                'http'  => 'tcp://localhost:8125', // Use this proxy with \"http\"\n                'https' => 'tcp://localhost:9124', // Use this proxy with \"https\",\n                'no' => ['.mit.edu', 'foo.com']    // Don't use a proxy with these\n        ],\n        'cert' => ['/path/server.pem', 'password']\n        ...\n    ]\n);\n")),(0,r.kt)("p",null,"It is possible to use your own preconfigured HTTP client that implements the ",(0,r.kt)("a",{parentName:"p",href:"https://www.php-fig.org/psr/psr-18/"},"PSR-18 interface"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$client = new Client(\n    'https://api.apito.io/secured/graphql',\n    [],\n    [],\n    $myHttpClient\n);\n")),(0,r.kt)("h2",{id:"running-queries"},"Running Queries"),(0,r.kt)("h3",{id:"running-raw-queries"},"Running Raw Queries"),(0,r.kt)("p",null,"Although not the primary goal of this package, but it supports running raw string queries, just like any other client using the runRawQuery method in the Client class. Here's an example on how to use it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'$gql = <<<QUERY\nquery {\n    pokemon(name: "Pikachu") {\n        id\n        number\n        name\n        attacks {\n            special {\n                name\n                type\n                damage\n            }\n        }\n    }\n}\nQUERY;\n\n$results = $client->runRawQuery($gql);\n')),(0,r.kt)("h3",{id:"result-formatting"},"Result Formatting"),(0,r.kt)("p",null,"Running query with the GraphQL client and getting the results in object\nstructure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$results = $client->runQuery($gql);\n$results->getData()->companies[0]->branches;\n")),(0,r.kt)("p",null,"Or getting results in array structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$results = $client->runQuery($gql, true);\n$results->getData()['companies'][1]['branches']['address'];\n")),(0,r.kt)("h3",{id:"passing-variables-to-queries"},"Passing Variables to Queries"),(0,r.kt)("p",null,"Running queries containing variables requires passing an associative array which\nmaps variable names (keys) to variable values (values) to the ",(0,r.kt)("inlineCode",{parentName:"p"},"runQuery")," method.\nHere's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$gql = (new Query('companies'))\n    ->setVariables(\n        [\n            new Variable('name', 'String', true),\n            new Variable('limit', 'Int', false, 5)\n        ]\n    )\n    ->setArguments(['name' => '$name', 'first' => '$limit'])\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n$variablesArray = ['name' => 'Tech Co.', 'first' => 5];\n$results = $client->runQuery($gql, true, $variablesArray);\n")),(0,r.kt)("h2",{id:"mutations"},"Mutations"),(0,r.kt)("p",null,"Mutations follow the same rules of queries in GraphQL, they select fields on\nreturned objects, receive arguments, and can have sub-fields."),(0,r.kt)("p",null,"Here's a sample example on how to construct and run mutations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$mutation = (new Mutation('createCompany'))\n    ->setArguments(['companyObject' => new RawObject('{name: \"Trial Company\", employees: 200}')])\n    ->setSelectionSet(\n        [\n            '_id',\n            'name',\n            'serialNumber',\n        ]\n    );\n$results = $client->runQuery($mutation);\n")),(0,r.kt)("p",null,"Mutations can be run by the client the same way queries are run."),(0,r.kt)("h3",{id:"mutations-with-variables-example"},"Mutations With Variables Example"),(0,r.kt)("p",null,"Mutations can utilize the variables in the same way Queries can. Here's an\nexample on how to use the variables to pass input objects to the GraphQL server\ndynamically:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$mutation = (new Mutation('createCompany'))\n    ->setVariables([new Variable('company', 'CompanyInputObject', true)])\n    ->setArguments(['companyObject' => '$company']);\n\n$variables = ['company' => ['name' => 'Tech Company', 'type' => 'Testing', 'size' => 'Medium']];\n$client->runQuery(\n    $mutation, true, $variables\n);\n")),(0,r.kt)("p",null,"These are the resulting mutation and the variables passed with it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'mutation($company: CompanyInputObject!) {\n  createCompany(companyObject: $company)\n}\n{"company":{"name":"Tech Company","type":"Testing","size":"Medium"}}\n')),(0,r.kt)("h2",{id:"detailed-guide"},"Detailed Guide"),(0,r.kt)("p",null,"For a detailed guide, be sure to check out the official github page ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mghoneimy/php-graphql-client"},"here")))}h.isMDXComponent=!0},67714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,s={unversionedId:"api-integration/graphql/shared/api-secret-note",id:"api-integration/graphql/shared/api-secret-note",title:"api-secret-note",description:"Always remember to replace API_SECRET with the correct value that you copied from apito console.",source:"@site/docs/api-integration/graphql/shared/api-secret-note.mdx",sourceDirName:"api-integration/graphql/shared",slug:"/api-integration/graphql/shared/api-secret-note",permalink:"/docs/api-integration/graphql/shared/api-secret-note",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-integration/graphql/shared/api-secret-note.mdx",tags:[],version:"current",frontMatter:{}},l={},p=[],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always remember to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"API_SECRET")," with the correct value that you copied from apito console.\nGo to ",(0,r.kt)("a",{parentName:"p",href:"/docs/console/api-integration-with-your-application"},"this page")," if you do not know where to find your api secrets for your project")))}c.isMDXComponent=!0}}]);